<?php
/**
 * APILogDetailsResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  PandaDoc\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PandaDoc Public API
 *
 * PandaDoc Public API documentation
 *
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PandaDoc\Client\Model;

use \ArrayAccess;
use \PandaDoc\Client\ObjectSerializer;

/**
 * APILogDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package  PandaDoc\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class APILogDetailsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APILogDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'url' => 'string',
        'method' => 'string',
        'status' => 'int',
        'requestTime' => 'string',
        'responseTime' => 'string',
        'responseBody' => 'object',
        'queryParamsString' => 'string',
        'queryParamsObject' => 'object',
        'requestBody' => 'object',
        'tokenType' => 'string',
        'application' => 'string',
        'key' => 'string',
        'requestId' => 'string',
        'userEmail' => 'string',
        'userId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'url' => null,
        'method' => null,
        'status' => null,
        'requestTime' => null,
        'responseTime' => null,
        'responseBody' => null,
        'queryParamsString' => null,
        'queryParamsObject' => null,
        'requestBody' => null,
        'tokenType' => null,
        'application' => null,
        'key' => null,
        'requestId' => null,
        'userEmail' => null,
        'userId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'method' => 'method',
        'status' => 'status',
        'requestTime' => 'request_time',
        'responseTime' => 'response_time',
        'responseBody' => 'response_body',
        'queryParamsString' => 'query_params_string',
        'queryParamsObject' => 'query_params_object',
        'requestBody' => 'request_body',
        'tokenType' => 'token_type',
        'application' => 'application',
        'key' => 'key',
        'requestId' => 'request_id',
        'userEmail' => 'user_email',
        'userId' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'method' => 'setMethod',
        'status' => 'setStatus',
        'requestTime' => 'setRequestTime',
        'responseTime' => 'setResponseTime',
        'responseBody' => 'setResponseBody',
        'queryParamsString' => 'setQueryParamsString',
        'queryParamsObject' => 'setQueryParamsObject',
        'requestBody' => 'setRequestBody',
        'tokenType' => 'setTokenType',
        'application' => 'setApplication',
        'key' => 'setKey',
        'requestId' => 'setRequestId',
        'userEmail' => 'setUserEmail',
        'userId' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'method' => 'getMethod',
        'status' => 'getStatus',
        'requestTime' => 'getRequestTime',
        'responseTime' => 'getResponseTime',
        'responseBody' => 'getResponseBody',
        'queryParamsString' => 'getQueryParamsString',
        'queryParamsObject' => 'getQueryParamsObject',
        'requestBody' => 'getRequestBody',
        'tokenType' => 'getTokenType',
        'application' => 'getApplication',
        'key' => 'getKey',
        'requestId' => 'getRequestId',
        'userEmail' => 'getUserEmail',
        'userId' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['requestTime'] = $data['requestTime'] ?? null;
        $this->container['responseTime'] = $data['responseTime'] ?? null;
        $this->container['responseBody'] = $data['responseBody'] ?? null;
        $this->container['queryParamsString'] = $data['queryParamsString'] ?? null;
        $this->container['queryParamsObject'] = $data['queryParamsObject'] ?? null;
        $this->container['requestBody'] = $data['requestBody'] ?? null;
        $this->container['tokenType'] = $data['tokenType'] ?? null;
        $this->container['application'] = $data['application'] ?? null;
        $this->container['key'] = $data['key'] ?? null;
        $this->container['requestId'] = $data['requestId'] ?? null;
        $this->container['userEmail'] = $data['userEmail'] ?? null;
        $this->container['userId'] = $data['userId'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method method
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets requestTime
     *
     * @return string|null
     */
    public function getRequestTime()
    {
        return $this->container['requestTime'];
    }

    /**
     * Sets requestTime
     *
     * @param string|null $requestTime requestTime
     *
     * @return self
     */
    public function setRequestTime($requestTime)
    {
        $this->container['requestTime'] = $requestTime;

        return $this;
    }

    /**
     * Gets responseTime
     *
     * @return string|null
     */
    public function getResponseTime()
    {
        return $this->container['responseTime'];
    }

    /**
     * Sets responseTime
     *
     * @param string|null $responseTime responseTime
     *
     * @return self
     */
    public function setResponseTime($responseTime)
    {
        $this->container['responseTime'] = $responseTime;

        return $this;
    }

    /**
     * Gets responseBody
     *
     * @return object|null
     */
    public function getResponseBody()
    {
        return $this->container['responseBody'];
    }

    /**
     * Sets responseBody
     *
     * @param object|null $responseBody responseBody
     *
     * @return self
     */
    public function setResponseBody($responseBody)
    {
        $this->container['responseBody'] = $responseBody;

        return $this;
    }

    /**
     * Gets queryParamsString
     *
     * @return string|null
     */
    public function getQueryParamsString()
    {
        return $this->container['queryParamsString'];
    }

    /**
     * Sets queryParamsString
     *
     * @param string|null $queryParamsString queryParamsString
     *
     * @return self
     */
    public function setQueryParamsString($queryParamsString)
    {
        $this->container['queryParamsString'] = $queryParamsString;

        return $this;
    }

    /**
     * Gets queryParamsObject
     *
     * @return object|null
     */
    public function getQueryParamsObject()
    {
        return $this->container['queryParamsObject'];
    }

    /**
     * Sets queryParamsObject
     *
     * @param object|null $queryParamsObject queryParamsObject
     *
     * @return self
     */
    public function setQueryParamsObject($queryParamsObject)
    {
        $this->container['queryParamsObject'] = $queryParamsObject;

        return $this;
    }

    /**
     * Gets requestBody
     *
     * @return object|null
     */
    public function getRequestBody()
    {
        return $this->container['requestBody'];
    }

    /**
     * Sets requestBody
     *
     * @param object|null $requestBody requestBody
     *
     * @return self
     */
    public function setRequestBody($requestBody)
    {
        $this->container['requestBody'] = $requestBody;

        return $this;
    }

    /**
     * Gets tokenType
     *
     * @return string|null
     */
    public function getTokenType()
    {
        return $this->container['tokenType'];
    }

    /**
     * Sets tokenType
     *
     * @param string|null $tokenType tokenType
     *
     * @return self
     */
    public function setTokenType($tokenType)
    {
        $this->container['tokenType'] = $tokenType;

        return $this;
    }

    /**
     * Gets application
     *
     * @return string|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param string|null $application application
     *
     * @return self
     */
    public function setApplication($application)
    {
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key key
     *
     * @return self
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets requestId
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['requestId'];
    }

    /**
     * Sets requestId
     *
     * @param string|null $requestId requestId
     *
     * @return self
     */
    public function setRequestId($requestId)
    {
        $this->container['requestId'] = $requestId;

        return $this;
    }

    /**
     * Gets userEmail
     *
     * @return string|null
     */
    public function getUserEmail()
    {
        return $this->container['userEmail'];
    }

    /**
     * Sets userEmail
     *
     * @param string|null $userEmail userEmail
     *
     * @return self
     */
    public function setUserEmail($userEmail)
    {
        $this->container['userEmail'] = $userEmail;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string|null $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


